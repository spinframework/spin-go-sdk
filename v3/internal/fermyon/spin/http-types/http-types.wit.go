// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package httptypes represents the imported interface "fermyon:spin/http-types".
package httptypes

import (
	"go.bytecodealliance.org/cm"
)

// HTTPStatus represents the u16 "fermyon:spin/http-types#http-status".
//
//	type http-status = u16
type HTTPStatus uint16

// Body represents the list "fermyon:spin/http-types#body".
//
//	type body = list<u8>
type Body cm.List[uint8]

// Headers represents the list "fermyon:spin/http-types#headers".
//
//	type headers = list<tuple<string, string>>
type Headers cm.List[[2]string]

// Params represents the list "fermyon:spin/http-types#params".
//
//	type params = list<tuple<string, string>>
type Params cm.List[[2]string]

// URI represents the string "fermyon:spin/http-types#uri".
//
//	type uri = string
type URI string

// Method represents the enum "fermyon:spin/http-types#method".
//
//	enum method {
//		get,
//		post,
//		put,
//		delete,
//		patch,
//		head,
//		options
//	}
type Method uint8

const (
	MethodGet Method = iota
	MethodPost
	MethodPut
	MethodDelete
	MethodPatch
	MethodHead
	MethodOptions
)

var _MethodStrings = [7]string{
	"get",
	"post",
	"put",
	"delete",
	"patch",
	"head",
	"options",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e Method) String() string {
	return _MethodStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e Method) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *Method) UnmarshalText(text []byte) error {
	return _MethodUnmarshalCase(e, text)
}

var _MethodUnmarshalCase = cm.CaseUnmarshaler[Method](_MethodStrings[:])

// Request represents the record "fermyon:spin/http-types#request".
//
//	record request {
//		method: method,
//		uri: uri,
//		headers: headers,
//		params: params,
//		body: option<body>,
//	}
type Request struct {
	_       cm.HostLayout   `json:"-"`
	Method  Method          `json:"method"`
	URI     URI             `json:"uri"`
	Headers Headers         `json:"headers"`
	Params  Params          `json:"params"`
	Body    cm.Option[Body] `json:"body"`
}

// Response represents the record "fermyon:spin/http-types#response".
//
//	record response {
//		status: http-status,
//		headers: option<headers>,
//		body: option<body>,
//	}
type Response struct {
	_       cm.HostLayout      `json:"-"`
	Status  HTTPStatus         `json:"status"`
	Headers cm.Option[Headers] `json:"headers"`
	Body    cm.Option[Body]    `json:"body"`
}

// HTTPError represents the enum "fermyon:spin/http-types#http-error".
//
//	enum http-error {
//		success,
//		destination-not-allowed,
//		invalid-url,
//		request-error,
//		runtime-error,
//		too-many-requests
//	}
type HTTPError uint8

const (
	HTTPErrorSuccess HTTPError = iota
	HTTPErrorDestinationNotAllowed
	HTTPErrorInvalidURL
	HTTPErrorRequestError
	HTTPErrorRuntimeError
	HTTPErrorTooManyRequests
)

var _HTTPErrorStrings = [6]string{
	"success",
	"destination-not-allowed",
	"invalid-url",
	"request-error",
	"runtime-error",
	"too-many-requests",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HTTPError) String() string {
	return _HTTPErrorStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e HTTPError) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *HTTPError) UnmarshalText(text []byte) error {
	return _HTTPErrorUnmarshalCase(e, text)
}

var _HTTPErrorUnmarshalCase = cm.CaseUnmarshaler[HTTPError](_HTTPErrorStrings[:])
