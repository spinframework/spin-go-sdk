// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package postgres represents the imported interface "spin:postgres/postgres@3.0.0".
package postgres

import (
	"go.bytecodealliance.org/cm"
)

// Error represents the variant "spin:postgres/postgres@3.0.0#error".
//
// Errors related to interacting with a database.
//
//	variant error {
//		connection-failed(string),
//		bad-parameter(string),
//		query-failed(string),
//		value-conversion-failed(string),
//		other(string),
//	}
type Error cm.Variant[uint8, string, string]

// ErrorConnectionFailed returns a [Error] of case "connection-failed".
func ErrorConnectionFailed(data string) Error {
	return cm.New[Error](0, data)
}

// ConnectionFailed returns a non-nil *[string] if [Error] represents the variant case "connection-failed".
func (self *Error) ConnectionFailed() *string {
	return cm.Case[string](self, 0)
}

// ErrorBadParameter returns a [Error] of case "bad-parameter".
func ErrorBadParameter(data string) Error {
	return cm.New[Error](1, data)
}

// BadParameter returns a non-nil *[string] if [Error] represents the variant case "bad-parameter".
func (self *Error) BadParameter() *string {
	return cm.Case[string](self, 1)
}

// ErrorQueryFailed returns a [Error] of case "query-failed".
func ErrorQueryFailed(data string) Error {
	return cm.New[Error](2, data)
}

// QueryFailed returns a non-nil *[string] if [Error] represents the variant case "query-failed".
func (self *Error) QueryFailed() *string {
	return cm.Case[string](self, 2)
}

// ErrorValueConversionFailed returns a [Error] of case "value-conversion-failed".
func ErrorValueConversionFailed(data string) Error {
	return cm.New[Error](3, data)
}

// ValueConversionFailed returns a non-nil *[string] if [Error] represents the variant case "value-conversion-failed".
func (self *Error) ValueConversionFailed() *string {
	return cm.Case[string](self, 3)
}

// ErrorOther returns a [Error] of case "other".
func ErrorOther(data string) Error {
	return cm.New[Error](4, data)
}

// Other returns a non-nil *[string] if [Error] represents the variant case "other".
func (self *Error) Other() *string {
	return cm.Case[string](self, 4)
}

var _ErrorStrings = [5]string{
	"connection-failed",
	"bad-parameter",
	"query-failed",
	"value-conversion-failed",
	"other",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Error) String() string {
	return _ErrorStrings[v.Tag()]
}

// DbDataType represents the enum "spin:postgres/postgres@3.0.0#db-data-type".
//
// Data types for a database column
//
//	enum db-data-type {
//		boolean,
//		int8,
//		int16,
//		int32,
//		int64,
//		floating32,
//		floating64,
//		str,
//		binary,
//		date,
//		time,
//		datetime,
//		timestamp,
//		other
//	}
type DbDataType uint8

const (
	DbDataTypeBoolean DbDataType = iota
	DbDataTypeInt8
	DbDataTypeInt16
	DbDataTypeInt32
	DbDataTypeInt64
	DbDataTypeFloating32
	DbDataTypeFloating64
	DbDataTypeStr
	DbDataTypeBinary
	DbDataTypeDate
	DbDataTypeTime
	DbDataTypeDateTime
	DbDataTypeTimestamp
	DbDataTypeOther
)

var _DbDataTypeStrings = [14]string{
	"boolean",
	"int8",
	"int16",
	"int32",
	"int64",
	"floating32",
	"floating64",
	"str",
	"binary",
	"date",
	"time",
	"datetime",
	"timestamp",
	"other",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e DbDataType) String() string {
	return _DbDataTypeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e DbDataType) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *DbDataType) UnmarshalText(text []byte) error {
	return _DbDataTypeUnmarshalCase(e, text)
}

var _DbDataTypeUnmarshalCase = cm.CaseUnmarshaler[DbDataType](_DbDataTypeStrings[:])

// DbValue represents the variant "spin:postgres/postgres@3.0.0#db-value".
//
// Database values
//
//	variant db-value {
//		boolean(bool),
//		int8(s8),
//		int16(s16),
//		int32(s32),
//		int64(s64),
//		floating32(f32),
//		floating64(f64),
//		str(string),
//		binary(list<u8>),
//		date(tuple<s32, u8, u8>),
//		time(tuple<u8, u8, u8, u32>),
//		datetime(tuple<s32, u8, u8, u8, u8, u8, u32>),
//		timestamp(s64),
//		db-null,
//		unsupported,
//	}
type DbValue cm.Variant[uint8, TupleS32U8U8U8U8U8U32Shape, int64]

// DbValueBoolean returns a [DbValue] of case "boolean".
func DbValueBoolean(data bool) DbValue {
	return cm.New[DbValue](0, data)
}

// Boolean returns a non-nil *[bool] if [DbValue] represents the variant case "boolean".
func (self *DbValue) Boolean() *bool {
	return cm.Case[bool](self, 0)
}

// DbValueInt8 returns a [DbValue] of case "int8".
func DbValueInt8(data int8) DbValue {
	return cm.New[DbValue](1, data)
}

// Int8 returns a non-nil *[int8] if [DbValue] represents the variant case "int8".
func (self *DbValue) Int8() *int8 {
	return cm.Case[int8](self, 1)
}

// DbValueInt16 returns a [DbValue] of case "int16".
func DbValueInt16(data int16) DbValue {
	return cm.New[DbValue](2, data)
}

// Int16 returns a non-nil *[int16] if [DbValue] represents the variant case "int16".
func (self *DbValue) Int16() *int16 {
	return cm.Case[int16](self, 2)
}

// DbValueInt32 returns a [DbValue] of case "int32".
func DbValueInt32(data int32) DbValue {
	return cm.New[DbValue](3, data)
}

// Int32 returns a non-nil *[int32] if [DbValue] represents the variant case "int32".
func (self *DbValue) Int32() *int32 {
	return cm.Case[int32](self, 3)
}

// DbValueInt64 returns a [DbValue] of case "int64".
func DbValueInt64(data int64) DbValue {
	return cm.New[DbValue](4, data)
}

// Int64 returns a non-nil *[int64] if [DbValue] represents the variant case "int64".
func (self *DbValue) Int64() *int64 {
	return cm.Case[int64](self, 4)
}

// DbValueFloating32 returns a [DbValue] of case "floating32".
func DbValueFloating32(data float32) DbValue {
	return cm.New[DbValue](5, data)
}

// Floating32 returns a non-nil *[float32] if [DbValue] represents the variant case "floating32".
func (self *DbValue) Floating32() *float32 {
	return cm.Case[float32](self, 5)
}

// DbValueFloating64 returns a [DbValue] of case "floating64".
func DbValueFloating64(data float64) DbValue {
	return cm.New[DbValue](6, data)
}

// Floating64 returns a non-nil *[float64] if [DbValue] represents the variant case "floating64".
func (self *DbValue) Floating64() *float64 {
	return cm.Case[float64](self, 6)
}

// DbValueStr returns a [DbValue] of case "str".
func DbValueStr(data string) DbValue {
	return cm.New[DbValue](7, data)
}

// Str returns a non-nil *[string] if [DbValue] represents the variant case "str".
func (self *DbValue) Str() *string {
	return cm.Case[string](self, 7)
}

// DbValueBinary returns a [DbValue] of case "binary".
func DbValueBinary(data cm.List[uint8]) DbValue {
	return cm.New[DbValue](8, data)
}

// Binary returns a non-nil *[cm.List[uint8]] if [DbValue] represents the variant case "binary".
func (self *DbValue) Binary() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 8)
}

// DbValueDate returns a [DbValue] of case "date".
func DbValueDate(data cm.Tuple3[int32, uint8, uint8]) DbValue {
	return cm.New[DbValue](9, data)
}

// Date returns a non-nil *[cm.Tuple3[int32, uint8, uint8]] if [DbValue] represents the variant case "date".
func (self *DbValue) Date() *cm.Tuple3[int32, uint8, uint8] {
	return cm.Case[cm.Tuple3[int32, uint8, uint8]](self, 9)
}

// DbValueTime returns a [DbValue] of case "time".
//
// (year, month, day)
func DbValueTime(data cm.Tuple4[uint8, uint8, uint8, uint32]) DbValue {
	return cm.New[DbValue](10, data)
}

// Time returns a non-nil *[cm.Tuple4[uint8, uint8, uint8, uint32]] if [DbValue] represents the variant case "time".
func (self *DbValue) Time() *cm.Tuple4[uint8, uint8, uint8, uint32] {
	return cm.Case[cm.Tuple4[uint8, uint8, uint8, uint32]](self, 10)
}

// DbValueDateTime returns a [DbValue] of case "datetime".
//
// (hour, minute, second, nanosecond)
// Date-time types are always treated as UTC (without timezone info).
// The instant is represented as a (year, month, day, hour, minute, second, nanosecond)
// tuple.
func DbValueDateTime(data cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]) DbValue {
	return cm.New[DbValue](11, data)
}

// DateTime returns a non-nil *[cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]] if [DbValue] represents the variant case "datetime".
func (self *DbValue) DateTime() *cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32] {
	return cm.Case[cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]](self, 11)
}

// DbValueTimestamp returns a [DbValue] of case "timestamp".
//
// Unix timestamp (seconds since epoch)
func DbValueTimestamp(data int64) DbValue {
	return cm.New[DbValue](12, data)
}

// Timestamp returns a non-nil *[int64] if [DbValue] represents the variant case "timestamp".
func (self *DbValue) Timestamp() *int64 {
	return cm.Case[int64](self, 12)
}

// DbValueDbNull returns a [DbValue] of case "db-null".
func DbValueDbNull() DbValue {
	var data struct{}
	return cm.New[DbValue](13, data)
}

// DbNull returns true if [DbValue] represents the variant case "db-null".
func (self *DbValue) DbNull() bool {
	return self.Tag() == 13
}

// DbValueUnsupported returns a [DbValue] of case "unsupported".
func DbValueUnsupported() DbValue {
	var data struct{}
	return cm.New[DbValue](14, data)
}

// Unsupported returns true if [DbValue] represents the variant case "unsupported".
func (self *DbValue) Unsupported() bool {
	return self.Tag() == 14
}

var _DbValueStrings = [15]string{
	"boolean",
	"int8",
	"int16",
	"int32",
	"int64",
	"floating32",
	"floating64",
	"str",
	"binary",
	"date",
	"time",
	"datetime",
	"timestamp",
	"db-null",
	"unsupported",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v DbValue) String() string {
	return _DbValueStrings[v.Tag()]
}

// ParameterValue represents the variant "spin:postgres/postgres@3.0.0#parameter-value".
//
// Values used in parameterized queries
//
//	variant parameter-value {
//		boolean(bool),
//		int8(s8),
//		int16(s16),
//		int32(s32),
//		int64(s64),
//		floating32(f32),
//		floating64(f64),
//		str(string),
//		binary(list<u8>),
//		date(tuple<s32, u8, u8>),
//		time(tuple<u8, u8, u8, u32>),
//		datetime(tuple<s32, u8, u8, u8, u8, u8, u32>),
//		timestamp(s64),
//		db-null,
//	}
type ParameterValue cm.Variant[uint8, TupleS32U8U8U8U8U8U32Shape, int64]

// ParameterValueBoolean returns a [ParameterValue] of case "boolean".
func ParameterValueBoolean(data bool) ParameterValue {
	return cm.New[ParameterValue](0, data)
}

// Boolean returns a non-nil *[bool] if [ParameterValue] represents the variant case "boolean".
func (self *ParameterValue) Boolean() *bool {
	return cm.Case[bool](self, 0)
}

// ParameterValueInt8 returns a [ParameterValue] of case "int8".
func ParameterValueInt8(data int8) ParameterValue {
	return cm.New[ParameterValue](1, data)
}

// Int8 returns a non-nil *[int8] if [ParameterValue] represents the variant case "int8".
func (self *ParameterValue) Int8() *int8 {
	return cm.Case[int8](self, 1)
}

// ParameterValueInt16 returns a [ParameterValue] of case "int16".
func ParameterValueInt16(data int16) ParameterValue {
	return cm.New[ParameterValue](2, data)
}

// Int16 returns a non-nil *[int16] if [ParameterValue] represents the variant case "int16".
func (self *ParameterValue) Int16() *int16 {
	return cm.Case[int16](self, 2)
}

// ParameterValueInt32 returns a [ParameterValue] of case "int32".
func ParameterValueInt32(data int32) ParameterValue {
	return cm.New[ParameterValue](3, data)
}

// Int32 returns a non-nil *[int32] if [ParameterValue] represents the variant case "int32".
func (self *ParameterValue) Int32() *int32 {
	return cm.Case[int32](self, 3)
}

// ParameterValueInt64 returns a [ParameterValue] of case "int64".
func ParameterValueInt64(data int64) ParameterValue {
	return cm.New[ParameterValue](4, data)
}

// Int64 returns a non-nil *[int64] if [ParameterValue] represents the variant case "int64".
func (self *ParameterValue) Int64() *int64 {
	return cm.Case[int64](self, 4)
}

// ParameterValueFloating32 returns a [ParameterValue] of case "floating32".
func ParameterValueFloating32(data float32) ParameterValue {
	return cm.New[ParameterValue](5, data)
}

// Floating32 returns a non-nil *[float32] if [ParameterValue] represents the variant case "floating32".
func (self *ParameterValue) Floating32() *float32 {
	return cm.Case[float32](self, 5)
}

// ParameterValueFloating64 returns a [ParameterValue] of case "floating64".
func ParameterValueFloating64(data float64) ParameterValue {
	return cm.New[ParameterValue](6, data)
}

// Floating64 returns a non-nil *[float64] if [ParameterValue] represents the variant case "floating64".
func (self *ParameterValue) Floating64() *float64 {
	return cm.Case[float64](self, 6)
}

// ParameterValueStr returns a [ParameterValue] of case "str".
func ParameterValueStr(data string) ParameterValue {
	return cm.New[ParameterValue](7, data)
}

// Str returns a non-nil *[string] if [ParameterValue] represents the variant case "str".
func (self *ParameterValue) Str() *string {
	return cm.Case[string](self, 7)
}

// ParameterValueBinary returns a [ParameterValue] of case "binary".
func ParameterValueBinary(data cm.List[uint8]) ParameterValue {
	return cm.New[ParameterValue](8, data)
}

// Binary returns a non-nil *[cm.List[uint8]] if [ParameterValue] represents the variant case "binary".
func (self *ParameterValue) Binary() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 8)
}

// ParameterValueDate returns a [ParameterValue] of case "date".
func ParameterValueDate(data cm.Tuple3[int32, uint8, uint8]) ParameterValue {
	return cm.New[ParameterValue](9, data)
}

// Date returns a non-nil *[cm.Tuple3[int32, uint8, uint8]] if [ParameterValue] represents the variant case "date".
func (self *ParameterValue) Date() *cm.Tuple3[int32, uint8, uint8] {
	return cm.Case[cm.Tuple3[int32, uint8, uint8]](self, 9)
}

// ParameterValueTime returns a [ParameterValue] of case "time".
//
// (year, month, day)
func ParameterValueTime(data cm.Tuple4[uint8, uint8, uint8, uint32]) ParameterValue {
	return cm.New[ParameterValue](10, data)
}

// Time returns a non-nil *[cm.Tuple4[uint8, uint8, uint8, uint32]] if [ParameterValue] represents the variant case "time".
func (self *ParameterValue) Time() *cm.Tuple4[uint8, uint8, uint8, uint32] {
	return cm.Case[cm.Tuple4[uint8, uint8, uint8, uint32]](self, 10)
}

// ParameterValueDateTime returns a [ParameterValue] of case "datetime".
//
// (hour, minute, second, nanosecond)
// Date-time types are always treated as UTC (without timezone info).
// The instant is represented as a (year, month, day, hour, minute, second, nanosecond)
// tuple.
func ParameterValueDateTime(data cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]) ParameterValue {
	return cm.New[ParameterValue](11, data)
}

// DateTime returns a non-nil *[cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]] if [ParameterValue] represents the variant case "datetime".
func (self *ParameterValue) DateTime() *cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32] {
	return cm.Case[cm.Tuple7[int32, uint8, uint8, uint8, uint8, uint8, uint32]](self, 11)
}

// ParameterValueTimestamp returns a [ParameterValue] of case "timestamp".
//
// Unix timestamp (seconds since epoch)
func ParameterValueTimestamp(data int64) ParameterValue {
	return cm.New[ParameterValue](12, data)
}

// Timestamp returns a non-nil *[int64] if [ParameterValue] represents the variant case "timestamp".
func (self *ParameterValue) Timestamp() *int64 {
	return cm.Case[int64](self, 12)
}

// ParameterValueDbNull returns a [ParameterValue] of case "db-null".
func ParameterValueDbNull() ParameterValue {
	var data struct{}
	return cm.New[ParameterValue](13, data)
}

// DbNull returns true if [ParameterValue] represents the variant case "db-null".
func (self *ParameterValue) DbNull() bool {
	return self.Tag() == 13
}

var _ParameterValueStrings = [14]string{
	"boolean",
	"int8",
	"int16",
	"int32",
	"int64",
	"floating32",
	"floating64",
	"str",
	"binary",
	"date",
	"time",
	"datetime",
	"timestamp",
	"db-null",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ParameterValue) String() string {
	return _ParameterValueStrings[v.Tag()]
}

// Column represents the record "spin:postgres/postgres@3.0.0#column".
//
// A database column
//
//	record column {
//		name: string,
//		data-type: db-data-type,
//	}
type Column struct {
	_        cm.HostLayout `json:"-"`
	Name     string        `json:"name"`
	DataType DbDataType    `json:"data-type"`
}

// Row represents the list "spin:postgres/postgres@3.0.0#row".
//
// A database row
//
//	type row = list<db-value>
type Row cm.List[DbValue]

// RowSet represents the record "spin:postgres/postgres@3.0.0#row-set".
//
// A set of database rows
//
//	record row-set {
//		columns: list<column>,
//		rows: list<row>,
//	}
type RowSet struct {
	_       cm.HostLayout   `json:"-"`
	Columns cm.List[Column] `json:"columns"`
	Rows    cm.List[Row]    `json:"rows"`
}

// Connection represents the imported resource "spin:postgres/postgres@3.0.0#connection".
//
// A connection to a postgres database.
//
//	resource connection
type Connection cm.Resource

// ResourceDrop represents the imported resource-drop for resource "connection".
//
// Drops a resource handle.
//
//go:nosplit
func (self Connection) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ConnectionResourceDrop((uint32)(self0))
	return
}

// ConnectionOpen represents the imported static function "open".
//
// Open a connection to the Postgres instance at `address`.
//
//	open: static func(address: string) -> result<connection, error>
//
//go:nosplit
func ConnectionOpen(address string) (result cm.Result[ErrorShape, Connection, Error]) {
	address0, address1 := cm.LowerString(address)
	wasmimport_ConnectionOpen((*uint8)(address0), (uint32)(address1), &result)
	return
}

// Execute represents the imported method "execute".
//
// Execute command to the database.
//
//	execute: func(statement: string, params: list<parameter-value>) -> result<u64,
//	error>
//
//go:nosplit
func (self Connection) Execute(statement string, params cm.List[ParameterValue]) (result cm.Result[ErrorShape, uint64, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	statement0, statement1 := cm.LowerString(statement)
	params0, params1 := cm.LowerList(params)
	wasmimport_ConnectionExecute((uint32)(self0), (*uint8)(statement0), (uint32)(statement1), (*ParameterValue)(params0), (uint32)(params1), &result)
	return
}

// Query represents the imported method "query".
//
// Query the database.
//
//	query: func(statement: string, params: list<parameter-value>) -> result<row-set,
//	error>
//
//go:nosplit
func (self Connection) Query(statement string, params cm.List[ParameterValue]) (result cm.Result[RowSetShape, RowSet, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	statement0, statement1 := cm.LowerString(statement)
	params0, params1 := cm.LowerList(params)
	wasmimport_ConnectionQuery((uint32)(self0), (*uint8)(statement0), (uint32)(statement1), (*ParameterValue)(params0), (uint32)(params1), &result)
	return
}
