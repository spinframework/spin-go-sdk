// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package batch represents the imported interface "wasi:keyvalue/batch@0.2.0-draft2".
//
// A keyvalue interface that provides batch operations.
//
// A batch operation is an operation that operates on multiple keys at once.
//
// Batch operations are useful for reducing network round-trip time. For example,
// if you want to
// get the values associated with 100 keys, you can either do 100 get operations or
// you can do 1
// batch get operation. The batch operation is faster because it only needs to make
// 1 network call
// instead of 100.
//
// A batch operation does not guarantee atomicity, meaning that if the batch operation
// fails, some
// of the keys may have been modified and some may not.
//
// This interface does has the same consistency guarantees as the `store` interface,
// meaning that
// you should be able to "read your writes."
//
// Please note that this interface is bare functions that take a reference to a bucket.
// This is to
// get around the current lack of a way to "extend" a resource with additional methods
// inside of
// wit. Future version of the interface will instead extend these methods on the base
// `bucket`
// resource.
package batch

import (
	"github.com/spinframework/spin-go-sdk/v2/internal/wasi/keyvalue/v0.2.0-draft2/store"
	"go.bytecodealliance.org/cm"
)

// Bucket represents the imported type alias "wasi:keyvalue/batch@0.2.0-draft2#bucket".
//
// See [store.Bucket] for more information.
type Bucket = store.Bucket

// Error represents the type alias "wasi:keyvalue/batch@0.2.0-draft2#error".
//
// See [store.Error] for more information.
type Error = store.Error

// GetMany represents the imported function "get-many".
//
// Get the key-value pairs associated with the keys in the store. It returns a list
// of
// key-value pairs.
//
// If any of the keys do not exist in the store, it returns a `none` value for that
// pair in the
// list.
//
// MAY show an out-of-date value if there are concurrent writes to the store.
//
// If any other error occurs, it returns an `Err(error)`.
//
//	get-many: func(bucket: borrow<bucket>, keys: list<string>) -> result<list<tuple<string,
//	option<list<u8>>>>, error>
//
//go:nosplit
func GetMany(bucket Bucket, keys cm.List[string]) (result cm.Result[ErrorShape, cm.List[cm.Tuple[string, cm.Option[cm.List[uint8]]]], Error]) {
	bucket0 := cm.Reinterpret[uint32](bucket)
	keys0, keys1 := cm.LowerList(keys)
	wasmimport_GetMany((uint32)(bucket0), (*string)(keys0), (uint32)(keys1), &result)
	return
}

// SetMany represents the imported function "set-many".
//
// Set the values associated with the keys in the store. If the key already exists
// in the
// store, it overwrites the value.
//
// Note that the key-value pairs are not guaranteed to be set in the order they are
// provided.
//
// If any of the keys do not exist in the store, it creates a new key-value pair.
//
// If any other error occurs, it returns an `Err(error)`. When an error occurs, it
// does not
// rollback the key-value pairs that were already set. Thus, this batch operation
// does not
// guarantee atomicity, implying that some key-value pairs could be set while others
// might
// fail.
//
// Other concurrent operations may also be able to see the partial results.
//
//	set-many: func(bucket: borrow<bucket>, key-values: list<tuple<string, list<u8>>>)
//	-> result<_, error>
//
//go:nosplit
func SetMany(bucket Bucket, keyValues cm.List[cm.Tuple[string, cm.List[uint8]]]) (result cm.Result[Error, struct{}, Error]) {
	bucket0 := cm.Reinterpret[uint32](bucket)
	keyValues0, keyValues1 := cm.LowerList(keyValues)
	wasmimport_SetMany((uint32)(bucket0), (*cm.Tuple[string, cm.List[uint8]])(keyValues0), (uint32)(keyValues1), &result)
	return
}

// DeleteMany represents the imported function "delete-many".
//
// Delete the key-value pairs associated with the keys in the store.
//
// Note that the key-value pairs are not guaranteed to be deleted in the order they
// are
// provided.
//
// If any of the keys do not exist in the store, it skips the key.
//
// If any other error occurs, it returns an `Err(error)`. When an error occurs, it
// does not
// rollback the key-value pairs that were already deleted. Thus, this batch operation
// does not
// guarantee atomicity, implying that some key-value pairs could be deleted while
// others might
// fail.
//
// Other concurrent operations may also be able to see the partial results.
//
//	delete-many: func(bucket: borrow<bucket>, keys: list<string>) -> result<_, error>
//
//go:nosplit
func DeleteMany(bucket Bucket, keys cm.List[string]) (result cm.Result[Error, struct{}, Error]) {
	bucket0 := cm.Reinterpret[uint32](bucket)
	keys0, keys1 := cm.LowerList(keys)
	wasmimport_DeleteMany((uint32)(bucket0), (*string)(keys0), (uint32)(keys1), &result)
	return
}
